{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"+KAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAqCC,mBAAS,IAA9C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAIEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAUH,GAH9C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCDPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGjC,OACI,sBAAKc,UAAU,yDAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFJO,G,KAAU,SAAC,GAAmB,IAAhBnB,EAAe,EAAfA,SAIvB,ECPwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OApBAC,qBAAW,WAEPxB,EAASC,GACLwB,MAAM,SAAAC,GAENH,EAAS,CACLf,KAAMkB,EACNL,SAAQ,SAIjB,CAACpB,IASGqB,EDpB0BK,CAAc1B,GAAlCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAUrB,OACI,qCACA,oBAAIJ,UAAU,oDAAd,SAAoEhB,IAClEoB,GAAW,mBAAGJ,UAAU,mDAAb,qBAET,qBAAKA,UAAU,8DAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADCA,EAAIC,cEzBrBgB,EAAe,WAIxB,MAAqCzC,mBAAS,CAAC,cAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KASA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACxB,cAAC,EAAD,CAEAA,SAAWA,GADLA,YCtB1B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,U","file":"static/js/main.8a1d8fc9.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ( { setCategories } ) => {\n\n    const [inputValue, setInputValue ] = useState(''); // string vacio\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        \n        //console.log('Submit hecho')\n\n        if( inputValue.trim().length > 2 ){\n            setCategories( cats => [ inputValue, ...cats ] );\n            setInputValue('');\n    }   \n}\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue } \n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","\n\n\nexport const getGifs = async( category ) => {\n\n    // PeticiÃ³n HTTP en JavaScritp actual \n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=5sTg6dsl86iiMlI77RZJfWNUkw8jLaP6`\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n} ","import React from 'react'\n\nexport const GifGridItem = ( {title, url} ) => {\n    //console.log(id, title, url);\n\n    return (\n        <div className=\"card animate__animated animate__bounce animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\nimport '../index.css';\n//import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ( { category }) => {\n\n    //const [count, setCount] = useState(0);\n    //const [images, setImages] = useState([]);\n    const { data:images, loading } = useFetchGifs( category );\n\n    //useEffect( () => {\n    //    getGifs( category )\n    //        .then( setImages );\n    //}, [ category ])\n\n\n    // getGifs();\n\n    return (\n        <>\n        <h3 className=\"animate__animated animate__bounce animate__fadeIn\">{ category }</h3>\n        { loading && <p className=\"animate__animated animate__bounce animate__flash\">Loading</p>}\n        {/* { loading ? 'Cargando....' : 'Data cargada'} */}\n            <div className=\"card-grid animate__animated animate__bounce animate__fadeIn\">\n                {\n                    images.map( img => (\n                        <GifGridItem\n                        key={ img.id }\n                        { ...img } \n                        />\n                    ) )\n                }\n            </div> \n        </>\n    )   \n}\n\n {/*<ol>\n                {\n                images.map( ({ id, title }) => (\n                <li key={ id }>{ title }</li>\n                ))\n                }\n            </ol>*/}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = ( category ) => {\n    \n    const [state, setstate] = useState({\n        data:[],\n        loading: true\n    });\n\n    useEffect( () => {\n\n        getGifs( category ) //esto es una promesa\n           .then( imgs => {\n\n            setstate({\n                data: imgs,\n                loading:false\n            });    \n        })\n\n    }, [category])\n\n    // setTimeout(() => {\n    //     setstate({\n    //         data: [1,2,3,4,5,6,7],\n    //         loading: false\n    //     })\n    // }, 3000);\n\n    return state; // { data:[]//es un arreglo, loading: true };\n\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n    \n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\n    \n    const [categories, setCategories ] = useState(['One Punch']);\n\n    //const handleAdd = () => {\n        //categories.push('XMen');\n        //setCategories( [ 'XMEN', ...categories] );\n      //  setCategories( cats => [...cats, 'Superman']);\n    \n   // }\n\n    return (        \n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category => (\n                    <GifGrid \n                    key={ category }\n                    category={ category } \n                    />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from \"./GifExpertApp\";\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// Crear GifExpertApp\n// <h2>GifExpertApp<h2/>\n//<hr />"],"sourceRoot":""}